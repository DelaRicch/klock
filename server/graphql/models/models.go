// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AdminProduct struct {
	ProductName               *string  `json:"productName,omitempty" gorm:"productName"`
	ProductDescription        *string  `json:"productDescription,omitempty" gorm:"productDescription"`
	ProductCategory           *string  `json:"productCategory,omitempty" gorm:"productCategory"`
	ProductPrice              *float64 `json:"productPrice,omitempty" gorm:"productPrice"`
	ProductDiscountPercentage *float64 `json:"productDiscountPercentage,omitempty" gorm:"productDiscountPercentage"`
	ProductQuantity           *int64   `json:"productQuantity,omitempty" gorm:"productQuantity"`
	ProductBrand              *string  `json:"productBrand,omitempty" gorm:"productBrand"`
	ProductCoverImage         *string  `json:"productCoverImage,omitempty" gorm:"productCoverImage"`
	ProductID                 *string  `json:"productId,omitempty" gorm:"productId"`
	ProductsRemaining         *int64   `json:"productsRemaining,omitempty" gorm:"productsRemaining"`
	ProductsSold              *int64   `json:"productsSold,omitempty" gorm:"productsSold"`
}

type CreateNewUser struct {
	Name     string `json:"name" gorm:"name"`
	Email    string `json:"email" gorm:"email"`
	Password string `json:"password" gorm:"password"`
	Role     *Role  `json:"role,omitempty" gorm:"role"`
}

type GoogleOneTap struct {
	Name    string `json:"name" gorm:"name"`
	Email   string `json:"email" gorm:"email"`
	Picture string `json:"picture" gorm:"picture"`
}

type LoginUser struct {
	Email      string `json:"email" gorm:"email"`
	Password   string `json:"password" gorm:"password"`
	RememberMe *bool  `json:"rememberMe,omitempty" gorm:"rememberMe"`
}

type Message struct {
	Message string `json:"message" gorm:"message"`
}

type Mutation struct {
}

type Product struct {
	ID                        int64                  `json:"ID" gorm:"primaryKey"`
	ProductName               string                 `json:"productName" gorm:"productName"`
	ProductDescription        string                 `json:"productDescription" gorm:"productDescription"`
	ProductCategory           string                 `json:"productCategory" gorm:"productCategory"`
	ProductPrice              float64                `json:"productPrice" gorm:"productPrice"`
	ProductDiscountPercentage float64                `json:"productDiscountPercentage" gorm:"productDiscountPercentage"`
	ProductQuantity           int64                  `json:"productQuantity" gorm:"productQuantity"`
	ProductBrand              string                 `json:"productBrand" gorm:"productBrand"`
	ProductCoverImage         string                 `json:"productCoverImage" gorm:"productCoverImage"`
	ProductGalleryImages      []*ProductGalleryImage `json:"productGalleryImages" gorm:"productGalleryImages"`
	ProductID                 string                 `json:"productId" gorm:"productId"`
	ProductsRemaining         int64                  `json:"productsRemaining" gorm:"productsRemaining"`
	ProductsSold              int64                  `json:"productsSold" gorm:"productsSold"`
	CreatedAt                 time.Time              `json:"createdAt" gorm:"createdAt"`
	UpdatedAt                 time.Time              `json:"updatedAt" gorm:"updatedAt"`
}

type Query struct {
}

type UpdatePassword struct {
	CurrentPassword string `json:"currentPassword" gorm:"currentPassword"`
	NewPassword     string `json:"newPassword" gorm:"newPassword"`
}

type UpdateUser struct {
	Name     *string `json:"name,omitempty" gorm:"name"`
	Email    *string `json:"email,omitempty" gorm:"email"`
	Photo    *string `json:"photo,omitempty" gorm:"photo"`
	Phone    *string `json:"phone,omitempty" gorm:"phone"`
	Location *string `json:"location,omitempty" gorm:"location"`
	Gender   *string `json:"gender,omitempty" gorm:"gender"`
}

type User struct {
	Name       string    `json:"name" gorm:"name"`
	Email      string    `json:"email" gorm:"email"`
	UserID     string    `json:"userID" gorm:"userID"`
	Role       Role      `json:"role" gorm:"role"`
	Password   string    `json:"password" gorm:"password"`
	RememberMe *bool     `json:"rememberMe,omitempty" gorm:"rememberMe"`
	Provider   *string   `json:"provider,omitempty" gorm:"provider"`
	Photo      *string   `json:"photo,omitempty" gorm:"photo"`
	Phone      *string   `json:"phone,omitempty" gorm:"phone"`
	Location   *string   `json:"location,omitempty" gorm:"location"`
	Gender     *string   `json:"gender,omitempty" gorm:"gender"`
	CreatedAt  time.Time `json:"createdAt" gorm:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt" gorm:"updatedAt"`
}

type UserAuthResponse struct {
	Message string `json:"message" gorm:"message"`
	Token   string `json:"token" gorm:"token"`
}

type UserProfile struct {
	Name     *string `json:"name,omitempty" gorm:"name"`
	Email    *string `json:"email,omitempty" gorm:"email"`
	UserID   *string `json:"userID,omitempty" gorm:"userID"`
	Role     *Role   `json:"role,omitempty" gorm:"role"`
	Photo    *string `json:"photo,omitempty" gorm:"photo"`
	Phone    *string `json:"phone,omitempty" gorm:"phone"`
	Location *string `json:"location,omitempty" gorm:"location"`
	Gender   *string `json:"gender,omitempty" gorm:"gender"`
}

type ProductGalleryImage struct {
	ID        int64  `json:"ID" gorm:"primaryKey"`
	ImageURL  string `json:"imageUrl" gorm:"imageUrl"`
	ProductID string `json:"productId" gorm:"productId"`
}

type PaymentMethod string

const (
	PaymentMethodVisa   PaymentMethod = "VISA"
	PaymentMethodPaypal PaymentMethod = "PAYPAL"
)

var AllPaymentMethod = []PaymentMethod{
	PaymentMethodVisa,
	PaymentMethodPaypal,
}

func (e PaymentMethod) IsValid() bool {
	switch e {
	case PaymentMethodVisa, PaymentMethodPaypal:
		return true
	}
	return false
}

func (e PaymentMethod) String() string {
	return string(e)
}

func (e *PaymentMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethod", str)
	}
	return nil
}

func (e PaymentMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductStatus string

const (
	ProductStatusCompleted ProductStatus = "COMPLETED"
	ProductStatusPending   ProductStatus = "PENDING"
)

var AllProductStatus = []ProductStatus{
	ProductStatusCompleted,
	ProductStatusPending,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusCompleted, ProductStatusPending:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
