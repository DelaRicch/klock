package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	graphql1 "github.com/DelaRicch/klock/server/graphql/generated"
	"github.com/DelaRicch/klock/server/graphql/models"
	"github.com/DelaRicch/klock/server/services"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.CreateNewUser) (*models.UserAuthResponse, error) {
	_, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.RegisterUser(input)
}

// LoginUser is the resolver for the LoginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, input models.LoginUser) (*models.UserAuthResponse, error) {
	_, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.LoginUser(input)
}

// GoogleOneTap is the resolver for the GoogleOneTap field.
func (r *mutationResolver) GoogleOneTap(ctx context.Context, input models.GoogleOneTap) (*models.UserAuthResponse, error) {
	_, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.GoogleOneTapLogin(input)
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input models.UpdateUser) (*models.UserAuthResponse, error) {
	ginc, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.UpdateUser(ginc, input)
}

// UpdatePassword is the resolver for the UpdatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, input models.UpdatePassword) (*models.Message, error) {
	ginc, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.UpdatePassword(ginc, input)
}

// UpdateAvatar is the resolver for the UpdateAvatar field.
func (r *mutationResolver) UpdateAvatar(ctx context.Context, input graphql.Upload) (*models.Message, error) {
	ginc, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.UpdateAvatar(ginc, input)
}

// DeleteUser is the resolver for the DeleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (*models.Message, error) {
	ginc, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.DeleteUser(ginc)
}

// DeleteUsers is the resolver for the DeleteUsers field.
func (r *mutationResolver) DeleteUsers(ctx context.Context, userID string) (*models.Message, error) {
	_, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.DeleteAllUsers(userID)
}

// CheckPassword is the resolver for the CheckPassword field.
func (r *mutationResolver) CheckPassword(ctx context.Context, input string) (*models.Message, error) {
	panic(fmt.Errorf("not implemented: CheckPassword - CheckPassword"))
}

// Users is the resolver for the Users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.UserProfile, error) {
	_, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.GetAllUsers()
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context) (*models.UserProfile, error) {
	ginc, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.GetUserProfile(ginc)
}

// RequestNewToken is the resolver for the RequestNewToken field.
func (r *queryResolver) RequestNewToken(ctx context.Context) (*models.UserAuthResponse, error) {
	ginC, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.RequestNewToken(ginC)
}

// AdminAllProducts is the resolver for the AdminAllProducts field.
func (r *queryResolver) AdminAllProducts(ctx context.Context) ([]*models.AdminProduct, error) {
	ginC, err := GinContextFromContext(ctx)

	if err != nil {
		return nil, fmt.Errorf(err.Error())
	}

	return services.AdminAllProducts(ginC)
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
